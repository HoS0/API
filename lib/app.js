// Generated by CoffeeScript 1.9.3
(function() {
  var DataManager, amqp, bodyParser, express, http, index, moment, name, path, uuid, ws;

  express = require('express');

  index = require('./routes/index.js');

  http = require('http');

  amqp = require('AMQP-boilerplate');

  path = require('path');

  bodyParser = require('body-parser');

  moment = require('moment');

  ws = require('nodejs-websocket');

  uuid = require('uuid');

  name = 'api';

  DataManager = 'datamanager';

  amqp.Initialize(name, function() {
    var app, generic, server;
    amqp.CreateRequestQueue(name, function(message) {
      return parseMessage(message);
    });
    app = express();
    app.set('port', 8080);
    app.set('views', path.join(__dirname, '../views'));
    app.set('view engine', 'html');
    app.use(express["static"](path.join(__dirname, '../public')));
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: true
    }));
    generic = function(req, res) {
      var service;
      console.log(req.body);
      service = req.originalUrl.substring(1);
      console.log(service);
      return amqp.SendMessage(service, req.body, function(amqpRes) {
        console.log(amqpRes);
        return res.send(JSON.stringify(amqpRes));
      });
    };
    app.get('/', index.index);
    app.get('*', generic);
    http.createServer(app).listen(app.get('port'), function() {
      return console.log('Express server listening on port ' + app.get('port'));
    });
    return server = ws.createServer(function(conn) {
      var id;
      try {
        console.log("New connection");
        id = uuid.v4();
        conn.on("text", function(str) {
          var e, obj, res;
          try {
            obj = JSON.parse(str);
            return amqp.SendMessage(obj.to, obj, function(amqpRes) {
              console.log(amqpRes);
              return onn.sendText(JSON.stringify(amqpRes));
            });
          } catch (_error) {
            e = _error;
            res = {
              type: 'other'
            };
            res.message = "error on communication";
            return conn.sendText(JSON.stringify(res));
          }
        });
        return conn.on("close", function(code, reason) {
          return console.log("Connection closed");
        });
      } catch (_error) {
        return console.log("error on make a connection");
      }
    }).listen(8001);
  });

}).call(this);
